name: "Artifactory Generic OIDC Multi-Job"
on:
  workflow_dispatch:
  push:
    # branches:
    # - feature/*
env:
  OIDC_PROVIDER: 'manu-new'
  OIDC_AUDIENCE: 'newmanu'
  JF_URL: "https://hts2.jfrog.io"
permissions:
  contents: read
  id-token: write
jobs:
  download-artifact:
    runs-on: ubuntu-latest
    outputs:
      access_token: ${{ steps.exchange_token.outputs.ACCESS_TOKEN }}  # Set output for access token
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Fetch OIDC Token
        id: fetch_oidc_token
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ env.JF_URL }}
        with:
          oidc-provider-name: ${{ env.OIDC_PROVIDER }}
          oidc-audience: ${{ env.OIDC_AUDIENCE }}
      - name: Get ID Token
        id: get_id_token
        run: |
          ID_TOKEN=$(curl -sLS -H "User-Agent: actions/oidc-client" -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=github" | jq .value | tr -d '"')
          echo "ID_TOKEN=${ID_TOKEN}" >> $GITHUB_ENV
      - name: Exchange token with access
        id: exchange_token  # Added an ID for this step
        env:
          ID_TOKEN: ${{ env.ID_TOKEN }}
          JFROG_PLATFORM_URL: ${{ env.JF_URL }}
        run: |
          ACCESS_TOKEN=$(curl -XPOST -H "Content-Type: application/json" "https://hts2.jfrog.io/access/api/v1/oidc/token" -d "{\"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \"subject_token_type\":\"urn:ietf:params:oauth:token-type:id_token\", \"subject_token\": \"${ID_TOKEN}\", \"provider_name\": \"manu-new\"}" | jq .access_token | tr -d '"')
          echo "::set-output name=ACCESS_TOKEN::${ACCESS_TOKEN}"  # Pass the access token as output

  # New job to initialize Terraform and resolve modules from Artifactory
  terraform-init-and-plan:
    needs: download-artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      # --- NEW STEP TO CREATE main.tf ---
      - name: Create main.tf for Artifactory Module Source
        run: |
          # Define the Terraform configuration directly in the workflow.
          # REPLACE <YOUR_REPO_KEY> with the actual repository key in Artifactory.
          cat << EOF > main.tf
            module "aws" {
              source  = "hts2.jfrog.io/manu-terra-module__myorg/vpc/aws"
           }

          }
          EOF
          
          # Optional: Print the file content for debugging
          echo "--- main.tf content ---"
          cat main.tf  

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0 # Specify your desired version

      - name: Configure .netrc for Artifactory Access
        # Uses the access token from the previous job's output
        env:
          ACCESS_TOKEN: ${{ needs.download-artifact.outputs.access_token }}
          JFROG_HOST: ${{ env.JF_URL }} # e.g., https://hts2.jfrog.io
        run: |
          # Artifactory requires a .netrc entry for module resolution.
          # Use the ACCESS_TOKEN as the password. The username can be anything (like 'x').
          # The domain for the Artifactory API is typically 'hts2.jfrog.io'.
          NETRC_PATH="${{ github.workspace }}/.netrc"
          echo "machine hts2.jfrog.io login x password ${ACCESS_TOKEN}" > "${NETRC_PATH}"
          chmod 600 "${NETRC_PATH}"
          echo "TF_NETRC_PATH=${NETRC_PATH}" >> $GITHUB_ENV

      - name: Initialize Terraform
        # This step will use the TF_NETRC_PATH environment variable to find the credentials
        # for downloading modules from the Artifactory module repository configured
        # in your main Terraform code (e.g., source="hts2.jfrog.io/<repo-key>/module-name/aws").
        run: |
           terraform init
           pwd
